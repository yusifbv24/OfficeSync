// <auto-generated />
using System;
using MessagingService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MessagingService.Infrastructure.Migrations
{
    [DbContext(typeof(MessagingDbContext))]
    [Migration("20251023105049_InitialProject")]
    partial class InitialProject
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MessagingService.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("channel_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsEdited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_edited");

                    b.Property<Guid?>("ParrentMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("parrent_message_id");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_messages_channel_id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_messages_created_at");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_messages_is_deleted");

                    b.HasIndex("ParrentMessageId")
                        .HasDatabaseName("ix_messages_parent_message_id");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_messages_sender_id");

                    b.HasIndex("ChannelId", "CreatedAt", "IsDeleted")
                        .HasDatabaseName("ix_messages_channel_created_deleted");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("MessagingService.Domain.Entities.MessageAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_name");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_url");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("mime_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .HasDatabaseName("ix_message_attachments_file_id");

                    b.HasIndex("MessageId")
                        .HasDatabaseName("ix_message_attachments_message_id");

                    b.HasIndex("MimeType")
                        .HasDatabaseName("ix_message_attachments_mime_type");

                    b.ToTable("message_attachments", (string)null);
                });

            modelBuilder.Entity("MessagingService.Domain.Entities.MessageReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("emoji");

                    b.Property<bool>("IsRemoved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_removed");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("IsRemoved")
                        .HasDatabaseName("ix_message_reactions_is_removed");

                    b.HasIndex("MessageId")
                        .HasDatabaseName("ix_message_reactions_message_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_message_reactions_user_id");

                    b.HasIndex("MessageId", "Emoji", "IsRemoved")
                        .HasDatabaseName("ix_message_reactions_message_emoji_removed");

                    b.HasIndex("MessageId", "UserId", "Emoji", "IsRemoved")
                        .IsUnique()
                        .HasDatabaseName("ix_message_reactions_unique_active")
                        .HasFilter("is_removed = false");

                    b.ToTable("message_reactions", (string)null);
                });

            modelBuilder.Entity("MessagingService.Domain.Entities.Message", b =>
                {
                    b.HasOne("MessagingService.Domain.Entities.Message", "ParrentMessage")
                        .WithMany()
                        .HasForeignKey("ParrentMessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParrentMessage");
                });

            modelBuilder.Entity("MessagingService.Domain.Entities.MessageAttachment", b =>
                {
                    b.HasOne("MessagingService.Domain.Entities.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("MessagingService.Domain.Entities.MessageReaction", b =>
                {
                    b.HasOne("MessagingService.Domain.Entities.Message", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("MessagingService.Domain.Entities.Message", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Reactions");
                });
#pragma warning restore 612, 618
        }
    }
}
